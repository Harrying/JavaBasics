作业1:
	两个线程分别输出A、B
	先轮流输出10次AB
	然后再修改代码 输出: AABAABAAB...
		A输出20次，B输出10次。
	
作业2:
	创建两个线程，其中一个输出1到52，另外一个输出A到Z。
	输出格式要求：
		12A 34B 56C 78D
		
作业3:
	有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池用一个数组int[] arr = {10,5,20,50,100,200,500,800,2,80,300};
  创建两个抽奖箱【线程】，线程名分别为“抽奖箱1”，“抽奖箱2”，
  两个线程 随机从arr数组中获取奖项元素并打印在控制台上，
  一直到数组中所有元素全部输出完，线程结束。
  
  提示：
	List集合，get方法，随机获取下标
	
  
扩展作业:
	生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），
如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，
店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。
  public class TestProduct {
  	public static void main(String[] args) {
  		Clerk01 clerk01 = new Clerk01();
  		Thread pro = new Thread(new Productor01(clerk01));
  		Thread con = new Thread(new Consumer01(clerk01));
  		pro.start();
  		con.start();


  	}
  }

  //销售员
  class Clerk01 {
  	private int product = 0;



  	//生产商品
  	public synchronized void add() {
  		if (product >= 20) {
  			try {
  				wait();
  				System.out.println("请暂停生产！");
  			} catch (InterruptedException e) {
  				e.printStackTrace();
  			}
  		}else{
  			product++;
  			System.out.println("生产者生产了第"+product+"个商品！");
  			notifyAll();

  		}
  	}

  	//消费商品
  	public synchronized void remove(){
  		if (this.product <= 0) {
  			try {

  				wait();
  			} catch (InterruptedException e) {
  				e.printStackTrace();
  			}
  		}else{
  			System.out.println("顾客取走了第"+ product +"个商品");
  			product--;
  			notifyAll();
  		}
  	}


  }


  //生产者
  class Productor01 implements Runnable {
  	Clerk01 clerk01;

  	public Productor01(Clerk01 clerk01){
  		this.clerk01 = clerk01;
  	}
  	@Override
  	public void run() {
  //		System.out.println("货架空了！");
  		System.out.println("现在开始生产产品");
  		while(true){
  			try {
  				Thread.sleep((int)(Math.random()*2000));
  			} catch (InterruptedException e) {

  			}
  			clerk01.add();
  		}

  	}

  }

  //消费者
  class Consumer01 implements Runnable {
  	Clerk01 clerk01;

  	public Consumer01(Clerk01 clerk01){
  		this.clerk01 = clerk01;
  	}

  	@Override
  	public void run() {
  		System.out.println("消费者开始取产品");
  		while(true){
  			try {
  				Thread.sleep((int)(Math.random()*2000));
  			} catch (InterruptedException e) {

  			}
  			clerk01.remove();
  		}
  	}

  }
  
  
  
  